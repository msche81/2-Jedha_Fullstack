import pandas as pd
import requests
import joblib
import json
from io import BytesIO

# Charger le mod√®le
def load_model(model_url):
    print("üì• T√©l√©chargement du mod√®le...")
    response = requests.get(model_url)
    if response.status_code == 200:
        print("‚úÖ Mod√®le t√©l√©charg√© avec succ√®s!")
        return joblib.load(BytesIO(response.content))
    else:
        raise Exception(f"‚ùå √âchec du t√©l√©chargement du mod√®le. Code : {response.status_code}")

# Interroger l'API pour obtenir des donn√©es
def fetch_data(api_url):
    print("\nüì° Requ√™te √† l'API en cours...")
    response = requests.get(api_url, headers={"Accept": "application/json"})
    if response.status_code == 200:
        print("‚úÖ Donn√©es r√©cup√©r√©es avec succ√®s!")
        print("Contenu brut (premiers caract√®res) :", response.text[:500])  # Debug : Inspecter le contenu

        try:
            # Charger le contenu JSON encod√©
            data_json = json.loads(response.text)  # Transformation explicite en dictionnaire
            if isinstance(data_json, str):
                print("üîÑ Double parsing requis : contenu JSON encod√© d√©tect√©.")
                data_json = json.loads(data_json)  # D√©coder √† nouveau si n√©cessaire

            print("‚úÖ R√©ponse convertie en JSON avec succ√®s!")
            # Transformer les donn√©es en DataFrame
            df = pd.DataFrame(data=data_json["data"], columns=data_json["columns"])
            return df
        except json.JSONDecodeError:
            print("‚ùå Erreur : Impossible de convertir le texte en JSON.")
            return None
        except KeyError as e:
            print(f"‚ùå Erreur : Cl√© manquante dans la r√©ponse JSON. {e}")
            return None
    else:
        raise Exception(f"‚ùå √âchec de la requ√™te API. Code : {response.status_code}")

# Faire une pr√©diction avec le mod√®le
def predict(model, data_df):
    print("\nüìä Pr√©diction en cours...")
    X = data_df.drop(columns=["MedHouseVal"])  # Supprimer la colonne cible
    prediction = model.predict(X)  # Faire une pr√©diction
    return prediction[0]

# Main
if __name__ == "__main__":
    # URLs
    MODEL_URL = "https://full-stack-assets.s3.eu-west-3.amazonaws.com/Deployment/house_prices_model.joblib"
    API_URL = "https://charlestng-house-prices-simple-api.hf.space/data"

    # Charger le mod√®le
    model = load_model(MODEL_URL)

    # R√©cup√©rer les donn√©es depuis l'API
    data_df = fetch_data(API_URL)

    # Faire une pr√©diction
    predicted_price = predict(model, data_df)

    # Simuler la vraie valeur pour comparaison
    actual_price = data_df["MedHouseVal"].iloc[0]  # Prendre la vraie valeur de la r√©ponse API
    print(f"\nSelon notre mod√®le, cette maison devrait co√ªter : {predicted_price:.4f}")
    print(f"La vraie valeur est : {actual_price:.4f}")
    print(f"Notre mod√®le est √† {abs(predicted_price - actual_price):.4f} pr√®s de la v√©rit√©.")
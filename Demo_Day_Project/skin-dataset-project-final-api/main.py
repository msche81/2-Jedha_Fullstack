import os
import boto3
import mlflow
import tensorflow as tf
from fastapi import FastAPI, UploadFile, File
from io import BytesIO
from PIL import Image
import numpy as np
import uvicorn
from tensorflow.keras.metrics import Metric
import tensorflow.keras.backend as K
from predict import predict_skin_type

# ‚úÖ D√©finition de la m√©trique F1Score pour √©viter l'erreur de chargement
class F1Score(Metric):
    def __init__(self, name="f1_score", **kwargs):
        super(F1Score, self).__init__(name=name, **kwargs)

    def update_state(self, y_true, y_pred, sample_weight=None):
        pass  # Ne pas modifier ici, juste pour la compatibilit√© du mod√®le

    def result(self):
        return K.variable(0.0)

# ‚úÖ Enregistrement de la m√©trique pour TensorFlow/Keras
tf.keras.utils.get_custom_objects()["F1Score"] = F1Score

# ‚úÖ API Metadata
description = """
üöÄ **Skin Type Classification API**

This API allows users to:
- ü©∫ **Upload an image** for skin type classification.
- üé≠ **Get a skin type prediction using a trained MLflow model**.
- ‚úÖ Improve model inference with TensorFlow
- ‚úÖ Enhance image preprocessing pipeline
- ‚úÖ Hyperparameter tuning via MLflow

**Developed as part of the Jedha Full-Stack Data Science Bootcamp.**
"""

tags_metadata = [
    {"name": "Health Check", "description": "API status check."},
    {"name": "Prediction", "description": "Skin type classification using MLflow & TensorFlow."},
    {"name": "Upload", "description": "Upload an image for prediction."}
]

# ‚úÖ Initialize FastAPI app
app = FastAPI(
    title="Skin Type Classification API",
    description=description,
    version="1.0.0",
    contact={"name": "Marie-Sophie Chenevier", "email": "mschenevier@gmail.com"},
    openapi_tags=tags_metadata
)

# ‚úÖ Configuration de MLflow & S3
S3_BUCKET = "skin-dataset-project-final"
S3_MODEL_PATH = "deployment/2/a1d3f171f7a846c88814497294900a99/artifacts/model/data/model.keras"
LOCAL_MODEL_PATH = "./model.keras"

# üî• T√©l√©charger le mod√®le depuis S3
s3_client = boto3.client("s3")

def download_model_from_s3():
    """
    T√©l√©charge le mod√®le MLflow depuis S3 et le sauvegarde localement.
    """
    try:
        print(f"üì• T√©l√©chargement du mod√®le depuis S3: s3://{S3_BUCKET}/{S3_MODEL_PATH}")
        s3_client.download_file(S3_BUCKET, S3_MODEL_PATH, LOCAL_MODEL_PATH)
        print("‚úÖ Mod√®le t√©l√©charg√© avec succ√®s !")
        return True
    except Exception as e:
        print(f"‚ùå Erreur de t√©l√©chargement du mod√®le depuis S3: {e}")
        return False

# üî• Charger le mod√®le TensorFlow uniquement si le t√©l√©chargement a r√©ussi
model = None
if download_model_from_s3():
    try:
        model = tf.keras.models.load_model(LOCAL_MODEL_PATH, custom_objects={"F1Score": F1Score})
        print("‚úÖ Mod√®le charg√© avec succ√®s depuis le fichier local !")
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement du mod√®le: {e}")

# ‚úÖ Health Check Endpoint
@app.get("/health", tags=["Health Check"])
def health_check():
    return {
        "status": "API is running!",
        "model_loaded": model is not None
    }

# ‚úÖ Endpoint pour la pr√©diction avec upload S3
@app.post("/predict", tags=["Prediction"])
async def predict_and_store(file: UploadFile = File(...)):
    """
    Upload an image, predict skin type and store the image in S3.
    """
    image_bytes = await file.read()  # üì∏ Lire l'image

    # üß† Faire la pr√©diction avec le mod√®le externe
    predicted_label = predict_skin_type(image_bytes)

    # üì§ Envoyer l'image vers S3 apr√®s la pr√©diction
    try:
        s3_filename = f"images/{file.filename}"
        s3_client.upload_fileobj(BytesIO(image_bytes), S3_BUCKET, s3_filename)
        print(f"‚úÖ Image {file.filename} envoy√©e sur S3 !")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'upload sur S3 : {e}")

    return {"filename": file.filename, "skin_type": predicted_label}

# ‚úÖ Image Upload
@app.post("/upload-to-s3", tags=["Upload"])
async def upload_image_to_s3(file: UploadFile = File(...)):
    """
    Upload an image and save it to S3 in the 'images/' folder.
    """
    try:
        s3_filename = f"images/{file.filename}"
        file.file.seek(0)
        s3_client.upload_fileobj(file.file, S3_BUCKET, s3_filename)
        
        s3_url = f"https://{S3_BUCKET}.s3.amazonaws.com/{s3_filename}"
        
        return {"filename": file.filename, "s3_url": s3_url, "message": "Upload vers S3 r√©ussi!"}

    except Exception as e:
        return {"error": f"Erreur lors de l'upload sur S3 : {str(e)}"}

# ‚úÖ Lancer l'API
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 7860)))